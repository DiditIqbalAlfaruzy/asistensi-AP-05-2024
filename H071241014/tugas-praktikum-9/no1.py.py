# -*- coding: utf-8 -*-
"""TUGASPRAKTIKUM_9

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wYpM2VTDCIxypUfJrpJQngIXA8vxO6U1

secretcode
"""

class SecretCode:
    # TODO: Something is missing here
    def __init__(self, code):
        self.code = code

    def get_code(self):
        try:
            return self.code
        except Exception as e:
            print(f"Error getting code: {e}")
            return None

    def set_code(self, new_code):
        try:
            self.code = new_code
        except Exception as e:
            print(f"Error setting code: {e}")

"""mathoperations"""

class MathOperations:
    def factorial(self, n):
        if n == 0 or n == 1:
            return 1
        else:
            return n * self.factorial(n - 1)

    def digit_sum(self, n):
        return sum(int(digit) for digit in str(n))

"""CodeBreaker

"""

from mathoperations import MathOperations

class CodeBreaker:
    def __init__(self, secret_code):
        try:
            self.code = secret_code
            # TODO: Something is missing here
            self.math_ops = MathOperations()
        except Exception as e:
            print(f"Error initializing CodeBreaker: {e}")

    def break_code(self):
        try:
            code = self.code.get_code()
            step_1 = self.math_ops.factorial(code % 10)
            step_2 = self.math_ops.digit_sum(step_1) #HASILNYA 6
            step_3 = (step_2 * code) % 1000   #%1000 tdk mengubah hasil
            # TODO: Something is missing here
            return step_3

        except Exception as e:
            print(f"Error breaking code: {e}")
            return None

"""MAIN.PY"""

import time
from tester import Tester


def main():
    tester = Tester()

    tester.test_break_code(123, 738)
    tester.test_break_code(456, 912)
    tester.test_break_code(789, 303)

    time.sleep(2)
    tester.final_results()


main()

"""TESTER.PY"""

import time
from secretcode import SecretCode
from codebreaker import CodeBreaker


class Tester:
    def __init__(self):
        self.tests_run = 0
        self.tests_passed = 0

    def test_break_code(self, initial_code, expected_result):
        try:
            secret_code = SecretCode(initial_code)
            code_breaker = CodeBreaker(secret_code)
            # TODO: Something is missing here
            result = code_breaker.break_code()

            self.tests_run += 1
            if result == expected_result:
                self.tests_passed += 1
                time.sleep(1)
                print(f"Test {self.tests_run}: Passed")
            else:
                time.sleep(1)
                print(f"Test {self.tests_run}: Failed (Result: {result}, Expected: {expected_result})")
        except Exception as e:
            self.tests_run += 1
            time.sleep(1)
            print(f"Test {self.tests_run}: Failed (Error: {e})")

    def final_results(self):
        print(f"Total Tests Run: {self.tests_run}")
        print(f"Total Tests Passed: {self.tests_passed}")